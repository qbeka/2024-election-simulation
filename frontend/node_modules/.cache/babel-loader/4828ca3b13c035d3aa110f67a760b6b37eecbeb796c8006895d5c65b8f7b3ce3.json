{"ast":null,"code":"var _jsxFileName = \"/Users/qendrimbeka/Decentralized voting simulation/frontend/src/components/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport axios from 'axios';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateBlues, interpolateReds } from 'd3-scale-chromatic';\nimport '../styles/MapComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = '/us-states-topojson.json';\nconst MapComponent = () => {\n  _s();\n  const [statesData, setStatesData] = useState({});\n  useEffect(() => {\n    const fetchStateResults = () => {\n      axios.get('http://localhost:5000/api/state-results').then(response => {\n        console.log('State results:', response.data);\n        setStatesData(response.data);\n      }).catch(error => {\n        console.error('Error fetching state results:', error);\n      });\n    };\n    fetchStateResults();\n    const interval = setInterval(fetchStateResults, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const getFillColor = stateCode => {\n    const stateResult = statesData[stateCode];\n    if (!stateResult) {\n      return '#D3D3D3'; // Grey\n    } else {\n      const {\n        democrat_percentage,\n        republican_percentage\n      } = stateResult;\n      const totalVotes = stateResult.democrat_votes + stateResult.republican_votes;\n      if (totalVotes === 0) {\n        return '#D3D3D3'; // Grey\n      }\n      const margin = Math.abs(democrat_percentage - republican_percentage);\n      const colorScale = scaleLinear().domain([0, 50]).range([0.5, 1]);\n      const t = colorScale(margin);\n      if (democrat_percentage > republican_percentage) {\n        return interpolateBlues(t);\n      } else {\n        return interpolateReds(t);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projection: \"geoAlbersUsa\",\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => geographies.map(geo => {\n          const stateCode = geo.properties.postal;\n          const fillColor = getFillColor(stateCode);\n          const stateResult = statesData[stateCode];\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            fill: fillColor,\n            stroke: \"#FFFFFF\",\n            strokeWidth: 0.5,\n            onMouseEnter: () => {\n              // Display tooltip or state info\n            },\n            onMouseLeave: () => {\n              // Hide tooltip or state info\n            }\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"APvMiAUDCEfdjRlHABlBloiQ7hc=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","ComposableMap","Geographies","Geography","axios","scaleLinear","interpolateBlues","interpolateReds","jsxDEV","_jsxDEV","geoUrl","MapComponent","_s","statesData","setStatesData","fetchStateResults","get","then","response","console","log","data","catch","error","interval","setInterval","clearInterval","getFillColor","stateCode","stateResult","democrat_percentage","republican_percentage","totalVotes","democrat_votes","republican_votes","margin","Math","abs","colorScale","domain","range","t","className","children","projection","geography","geographies","map","geo","properties","postal","fillColor","fill","stroke","strokeWidth","onMouseEnter","onMouseLeave","rsmKey","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/qendrimbeka/Decentralized voting simulation/frontend/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n} from 'react-simple-maps';\nimport axios from 'axios';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateBlues, interpolateReds } from 'd3-scale-chromatic';\nimport '../styles/MapComponent.css';\n\nconst geoUrl = '/us-states-topojson.json';\n\nconst MapComponent = () => {\n  const [statesData, setStatesData] = useState({});\n\n  useEffect(() => {\n    const fetchStateResults = () => {\n      axios\n        .get('http://localhost:5000/api/state-results')\n        .then((response) => {\n          console.log('State results:', response.data);\n          setStatesData(response.data);\n        })\n        .catch((error) => {\n          console.error('Error fetching state results:', error);\n        });\n    };\n\n    fetchStateResults();\n    const interval = setInterval(fetchStateResults, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getFillColor = (stateCode) => {\n    const stateResult = statesData[stateCode];\n    if (!stateResult) {\n      return '#D3D3D3'; // Grey\n    } else {\n      const { democrat_percentage, republican_percentage } = stateResult;\n      const totalVotes = stateResult.democrat_votes + stateResult.republican_votes;\n      if (totalVotes === 0) {\n        return '#D3D3D3'; // Grey\n      }\n      const margin = Math.abs(democrat_percentage - republican_percentage);\n      const colorScale = scaleLinear()\n        .domain([0, 50])\n        .range([0.5, 1]);\n\n      const t = colorScale(margin);\n\n      if (democrat_percentage > republican_percentage) {\n        return interpolateBlues(t);\n      } else {\n        return interpolateReds(t);\n      }\n    }\n  };\n\n  return (\n    <div className=\"map-container\">\n      <ComposableMap projection=\"geoAlbersUsa\">\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const stateCode = geo.properties.postal;\n              const fillColor = getFillColor(stateCode);\n              const stateResult = statesData[stateCode];\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={fillColor}\n                  stroke=\"#FFFFFF\"\n                  strokeWidth={0.5}\n                  onMouseEnter={() => {\n                    // Display tooltip or state info\n                  }}\n                  onMouseLeave={() => {\n                    // Hide tooltip or state info\n                  }}\n                />\n              );\n            })\n          }\n        </Geographies>\n      </ComposableMap>\n    </div>\n  );\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}